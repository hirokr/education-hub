// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  discussions   Discussion[]
  replies       Reply[]
  reviews       Review[]
  votes         Vote[]
  bookmarks     Bookmark[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Discussion {
  id        String     @id @default(cuid())
  title     String
  content   String
  category  String
  authorId  String
  author    User       @relation(fields: [authorId], references: [id])
  replies   Reply[]
  bookmarks Bookmark[]
  createdAt DateTime   @default(now())
}

model Reply {
  id           String  @id @default(cuid())
  content      String
  authorId     String
  discussionId String
  parentId     String?

  author     User       @relation(fields: [authorId], references: [id])
  discussion Discussion @relation(fields: [discussionId], references: [id])
  parent     Reply?     @relation("ReplyToReply", fields: [parentId], references: [id])
  children   Reply[]    @relation("ReplyToReply")
  votes      Vote[]
  createdAt  DateTime   @default(now())
}

model Review {
  id        String   @id @default(cuid())
  content   String
  rating    Int
  authorId  String
  user      User     @relation(fields: [authorId], references: [id])
  votes     Vote[]
  createdAt DateTime @default(now())
}

model Vote {
  id       String  @id @default(cuid())
  userId   String
  reviewId String?
  replyId  String?
  value    Int

  user   User    @relation(fields: [userId], references: [id])
  review Review? @relation(fields: [reviewId], references: [id])
  reply  Reply?  @relation(fields: [replyId], references: [id])
}

model Bookmark {
  id           String  @id @default(cuid())
  userId       String
  discussionId String?

  user       User        @relation(fields: [userId], references: [id])
  discussion Discussion? @relation(fields: [discussionId], references: [id])
}
