// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String       @id @default(cuid())
  name                  String?
  email                 String?      @unique
  emailVerified         DateTime?
  password              String?
  image                 String?
  accounts              Account[]
  sessions              Session[]
  discussions           Discussion[]
  replies               Reply[]
  reviews               Review[]
  votes                 Vote[]
  bookmarks             Bookmark[]
  scholarshipApplications ScholarshipApplication[]
  jobApplications       JobApplication[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Discussion {
  id        String     @id @default(cuid())
  title     String
  content   String
  category  String?
  authorId  String
  author    User       @relation(fields: [authorId], references: [id])
  replies   Reply[]

  createdAt DateTime   @default(now())
}

model Reply {
  id           String  @id @default(cuid())
  content      String
  authorId     String
  discussionId String
  parentId     String?

  author     User       @relation(fields: [authorId], references: [id])
  discussion Discussion @relation(fields: [discussionId], references: [id])
  parent     Reply?     @relation("ReplyToReply", fields: [parentId], references: [id])
  children   Reply[]    @relation("ReplyToReply")
  createdAt  DateTime   @default(now())
}

model Review {
  id        String   @id @default(cuid())
  title     String
  content   String
  rating    Int
  authorId  String
  category  String
  user      User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
}

model Vote {
  id       String   @id @default(cuid())
  userId   String
  itemId   String   // ID of either a reply or review
  type     String   // 'review' or 'reply'
  value    Int      // 1 for upvote, -1 for downvote

  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])

  @@unique([userId, itemId]) // prevent multiple votes by same user on same item
}

model Bookmark {
  id           String   @id @default(cuid())
  userId       String
  itemId       String? // The id can be a reviewId or a discussionId
  type         String?   // 'review' or 'discussion'
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])
  
  @@unique([userId, itemId])  // composite unique constraint (userId and itemId)
}


model Scholarship {
  id            String   @id @default(cuid())
  scholarship_id String  @unique
  title         String
  sponsor       String
  description   String   @db.Text
  deadline      DateTime
  amount        String
  eligibility   String
  location      String
  tags          String[]
  posted_on     DateTime
  applications  ScholarshipApplication[]
}

model Job {
  id            String   @id @default(cuid())
  job_id        String   @unique
  job_title     String
  company_name  String
  company_logo  String
  date          DateTime
  location      String
  position      String
  salary_range  Json     // Will store min and max as a JSON object
  job_tags      String[]
  job_description String @db.Text
  posted_on     DateTime
  deadline      DateTime
  applications  JobApplication[]
}

model ScholarshipApplication {
  id            String   @id @default(cuid())
  userId        String
  scholarshipId String
  fullName      String
  email         String
  phone         String
  academicInfo  String   @db.Text
  coverLetter   String   @db.Text
  documents     String?  // Store the file path
  status        String   @default("pending") // pending, accepted, rejected
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user        User        @relation(fields: [userId], references: [id])
  scholarship Scholarship @relation(fields: [scholarshipId], references: [id])
}

model JobApplication {
  id            String   @id @default(cuid())
  userId        String
  jobId         String
  fullName      String
  email         String
  phone         String
  coverLetter   String   @db.Text
  resume        String?  // Store the file path
  status        String   @default("pending") // pending, accepted, rejected
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  job  Job  @relation(fields: [jobId], references: [id])
}
