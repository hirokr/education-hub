generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                      String                   @id @default(cuid())
  name                    String?
  email                   String?                  @unique
  emailVerified           DateTime?
  password                String?
  image                   String?
  accounts                Account[]
  bookmarks               Bookmark[]
  discussions             Discussion[]
  jobApplications         JobApplication[]
  replies                 Reply[]
  reviews                 Review[]
  scholarshipApplications ScholarshipApplication[]
  sessions                Session[]
  votes                   Vote[]
  savedJobs               SavedJob[]    @relation("UserSavedJobs")
  savedScholarships       SavedScholarship[] @relation("UserSavedScholarships")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Discussion {
  id        String     @id @default(cuid())
  title     String
  content   String
  category  String?
  authorId  String
  createdAt DateTime   @default(now())
  bookmarks Bookmark[]
  author    User       @relation(fields: [authorId], references: [id])
  replies   Reply[]

  createdAt DateTime   @default(now())
}

model Reply {
  id           String     @id @default(cuid())
  content      String
  authorId     String
  discussionId String
  parentId     String?

  author     User       @relation(fields: [authorId], references: [id])
  discussion Discussion @relation(fields: [discussionId], references: [id])
  parent     Reply?     @relation("ReplyToReply", fields: [parentId], references: [id])
  children   Reply[]    @relation("ReplyToReply")
  createdAt  DateTime   @default(now())
  createdAt    DateTime   @default(now())
  author       User       @relation(fields: [authorId], references: [id])
  discussion   Discussion @relation(fields: [discussionId], references: [id])
  parent       Reply?     @relation("ReplyToReply", fields: [parentId], references: [id])
  children     Reply[]    @relation("ReplyToReply")
  votes        Vote[]
}

model Review {
  id        String   @id @default(cuid())
  title     String
  content   String
  rating    Int
  authorId  String
  category  String
  user      User     @relation(fields: [authorId], references: [id])
}

model Vote {
  id       String   @id @default(cuid())
  userId   String
  reviewId String?
  replyId  String?
  value    Int
  reply    Reply?  @relation(fields: [replyId], references: [id])
  review   Review? @relation(fields: [reviewId], references: [id])
  user     User    @relation(fields: [userId], references: [id])
}

model Bookmark {
  id           String  @id @default(cuid())
  userId       String
  discussionId String?

  user       User        @relation(fields: [userId], references: [id])
  discussion Discussion? @relation(fields: [discussionId], references: [id])
}


model Scholarship {
  id             String                   @id @default(cuid())
  scholarship_id String                   @unique
  title          String
  sponsor        String
  description    String
  deadline       DateTime
  amount         String
  eligibility    String
  location       String
  tags           String[]
  posted_on      DateTime
  applications   ScholarshipApplication[]
  savedByUsers   SavedScholarship[]       @relation("ScholarshipSavedByUsers")
}

model Job {
  id              String           @id @default(cuid())
  job_id          String           @unique
  job_title       String
  company_name    String
  company_logo    String
  date            DateTime
  location        String
  position        String
  salary_range    Json
  job_tags        String[]
  job_description String
  posted_on       DateTime
  deadline        DateTime
  applications    JobApplication[]
  savedByUsers    SavedJob[]       @relation("JobSavedByUsers")
}

model ScholarshipApplication {
  id            String      @id @default(cuid())
  userId        String
  scholarshipId String
  fullName      String
  email         String
  phone         String
  academicInfo  String
  coverLetter   String
  documents     String?
  status        String      @default("pending")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  scholarship   Scholarship @relation(fields: [scholarshipId], references: [id])
  user          User        @relation(fields: [userId], references: [id])
}

model JobApplication {
  id          String   @id @default(cuid())
  userId      String
  jobId       String
  fullName    String
  email       String
  phone       String
  coverLetter String
  resume      String?
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  job         Job      @relation(fields: [jobId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model SavedJob {
  id        String   @id @default(cuid())
  userId    String
  jobId     String
  job       Job      @relation("JobSavedByUsers", fields: [jobId], references: [job_id])
  createdAt DateTime @default(now())
  user      User     @relation("UserSavedJobs", fields: [userId], references: [id])

  @@unique([userId, jobId])
}

model SavedScholarship {
  id            String      @id @default(cuid())
  userId        String
  scholarshipId String
  scholarship   Scholarship @relation("ScholarshipSavedByUsers", fields: [scholarshipId], references: [scholarship_id])
  createdAt     DateTime    @default(now())
  user          User        @relation("UserSavedScholarships", fields: [userId], references: [id])

  @@unique([userId, scholarshipId])
}
